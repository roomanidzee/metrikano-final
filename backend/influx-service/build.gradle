buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
        springCloudVersion = 'Greenwich.RELEASE'
        dependencyManagementVersion = '1.0.6.RELEASE'
    }
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("io.spring.gradle:dependency-management-plugin:$dependencyManagementVersion")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

bootRun{
    jvmArgs = ["-Xmx200m", "-Xms200m"]
}

bootJar {
   archiveName = 'app.jar'
}

group 'com.romanidze.metrikano'
version '1.0'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
}

ext{

    logbackVersion = '1.2.3'
    logbackJSONVersion = '5.2'
    slf4jVersion = '1.7.25'
    jaxbVersion = '2.3.1'

    lombokVersion = '1.18.2'
    mapstructVersion = '1.3.0.Final'
    jacksonVersion = '2.9.8'

    jasperReportsVersion = '6.7.0'
    itextVersion = '2.1.7'
    
    influxVersion = '1.8'
    kafkaVersion = '2.2.4.RELEASE'
    retryVersion = '1.2.4.RELEASE'

    commonsLangVersion = '3.9'
    jsonWebTokenVersion = '0.9.1'

}

dependencies {

    compile('org.springframework.cloud:spring-cloud-starter-consul-all')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("io.reactivex.rxjava2:rxjava")

    compile("org.springframework.kafka:spring-kafka:$kafkaVersion")
    compile("org.springframework.retry:spring-retry:$retryVersion")
    compile("com.github.miwurster:spring-data-influxdb:$influxVersion")

    compile("ch.qos.logback:logback-classic:$logbackVersion")
    compile("ch.qos.logback:logback-access:$logbackVersion")
    compile("net.logstash.logback:logstash-logback-encoder:$logbackJSONVersion")

    compile("org.slf4j:slf4j-api:$slf4jVersion")
    compile("org.slf4j:jul-to-slf4j:$slf4jVersion")
    compile("org.slf4j:log4j-over-slf4j:$slf4jVersion")

    compile("javax.xml.bind:jaxb-api:$jaxbVersion")
    
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    
    compileOnly("org.mapstruct:mapstruct:$mapstructVersion")
    annotationProcessor("org.mapstruct:mapstruct-processor:$mapstructVersion")
    
    compile("org.springframework.boot:spring-boot-configuration-processor")

    compile("net.sf.jasperreports:jasperreports:$jasperReportsVersion")
    compile("com.lowagie:itext:$itextVersion")

    compile("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    compile("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")

    compile("com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")

    compile("org.apache.commons:commons-lang3:$commonsLangVersion")
    compile("io.jsonwebtoken:jjwt:$jsonWebTokenVersion")
    
}
